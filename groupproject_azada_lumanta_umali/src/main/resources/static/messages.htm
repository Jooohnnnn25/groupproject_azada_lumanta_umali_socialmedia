<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messaging System</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            background-color: #f5f5f5;
        }

        .container {
            display: flex;
            width: 100%;
            height: 100vh;
        }

        .friends-list {
            width: 250px;
            background-color: #ffffff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .friends-list h3 {
            margin-top: 0;
        }

        .friends-list ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            width: 100%;
        }

        .friends-list li {
            padding: 15px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            width: 100%;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .friends-list li:hover {
            background-color: #dcdcdc;
        }

        .chat-box {
            flex-grow: 1;
            background-color: #ffffff;
            padding: 30px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .messages {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding-right: 10px;
        }

        .message {
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            margin: 10px 0;
            padding: 15px;
            background-color: #f0f0f0;
            border-radius: 10px;
            max-width: 70%;
        }

        .message-input-container {
            display: flex;
            flex-direction: column;
        }

        .message-input-container textarea {
            width: 100%;
            padding: 10px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
            font-size: 14px;
            resize: none;
        }

        .message-input-container input[type="file"] {
            margin-bottom: 10px;
        }

        .message-options {
            display: none;
            flex-direction: column;
            margin-top: 5px;
        }

        .message:hover .message-options {
            display: flex;
        }

        .status {
            font-size: 12px;
            color: #888;
        }

        #typing-indicator {
            font-style: italic;
            color: #888;
            margin-bottom: 10px;
        }

        .attachment {
            margin-top: 10px;
        }

        .attachment img {
            max-width: 200px;
            border-radius: 5px;
        }

        button {
            background-color: #261b1b;
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 12px;
        }

        button:hover {
            background-color: #1f181e;
        }

        .back-btn {
            background-color: #2c2323;
            margin-bottom: 20px;
        }

        .back-btn:hover {
            background-color: #2c2626;
        }

        .message-options button {
            font-size: 14px;
            padding: 5px;
            margin: 0 5px;
        }

        .message-options {
            display: flex;
            justify-content: flex-end;
        }

        .message-options button:hover {
            background-color: #ccc;
        }

        .crud-icons {
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .crud-icons button {
            font-size: 14px;
            width: 30px;
            height: 30px;
            padding: 5px;
            margin-left: 5px;
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="friends-list">
            <button class="back-btn" onclick="window.location.href='/Home.htm'">Back</button>
            <h3>Select a Friend</h3>
            <ul>
                <li onclick="selectFriend('Olivia Johnson')">Olivia</li>
                <li onclick="selectFriend('Liza Garcia')">Liza</li>
                <li onclick="selectFriend('Alex Johnson')">Alex</li>
            </ul>
        </div>

        <div class="chat-box">
            <div class="chat-header">
                <h3>Chat with <span id="friend-name">No one</span></h3>
                <div id="typing-indicator"></div>
            </div>
            <div class="messages" id="messages"></div>

            <div class="message-input-container">
                <textarea id="message-input" placeholder="Type a message..."></textarea>
                <input type="file" id="file-input" onchange="handleFileUpload()">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        let currentFriend = null;
        let messages = JSON.parse(localStorage.getItem('messages')) || [];
        let typingTimer;
        let typingTimeout = 1000;

        function selectFriend(friendName) {
            currentFriend = friendName;
            document.getElementById('friend-name').innerText = currentFriend;
            document.getElementById('messages').innerHTML = ''; // Clear previous messages
            document.getElementById('typing-indicator').innerText = ''; // Clear typing indicator
            messages.forEach(message => {
                if (message.friend === currentFriend) {
                    displayMessage(message);
                }
            });
        }

        function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const messageText = messageInput.value.trim();
            const fileInput = document.getElementById('file-input');

            if (messageText !== '' || fileInput.files.length > 0) {
                const message = {
                    id: Date.now(),
                    text: messageText,
                    friend: currentFriend,
                    status: 'Sent',
                    time: new Date().toLocaleTimeString(),
                    file: fileInput.files[0] ? URL.createObjectURL(fileInput.files[0]) : null
                };
                messages.push(message);
                messageInput.value = '';
                fileInput.value = '';
                displayMessage(message);
                saveMessages();
                document.getElementById('typing-indicator').innerText = ''; // Clear typing indicator
            }
        }

        function displayMessage(message) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            messageDiv.id = 'message-' + message.id;

            messageDiv.innerHTML = `
                <p>${message.text}</p>
                ${message.file ? `<div class="attachment"><img src="${message.file}" alt="Attachment"></div>` : ''}
                <span class="status">${message.status} at ${message.time}</span>
                <div class="crud-icons">
                    <button onclick="editMessage(${message.id})">✏️</button>
                    <button onclick="deleteMessage(${message.id})">❌</button>
                </div>
            `;

            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight; // Scroll to bottom for new messages
        }

        function editMessage(messageId) {
    const messageDiv = document.getElementById('message-' + messageId);
    const messageText = messageDiv.querySelector('p').innerText;

    // Make the message text editable
    const inputField = document.createElement('textarea');
    inputField.value = messageText;
    messageDiv.querySelector('p').replaceWith(inputField);

    // Focus the input field and automatically save changes when the user presses Enter
    inputField.focus();
    inputField.addEventListener('blur', function() {
        saveMessage(messageId, inputField.value, messageDiv);
    });

    inputField.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            saveMessage(messageId, inputField.value, messageDiv);
        }
    });
}


function saveMessage(messageId, newText, messageDiv) {
    const message = messages.find(msg => msg.id === messageId);
    message.text = newText;

    // Replace textarea with the updated message text
    const p = document.createElement('p');
    p.innerText = newText;
    messageDiv.querySelector('textarea').replaceWith(p);

    // Recreate the "Edit" and "Delete" buttons
    const editButton = document.createElement('button');
    editButton.textContent = '✏️';
    editButton.onclick = () => editMessage(messageId);
    
    const deleteButton = document.createElement('button');
    deleteButton.textContent = '❌';
    deleteButton.onclick = () => deleteMessage(messageId);

    // Append the "Edit" and "Delete" buttons back to the message
    const crudIcons = messageDiv.querySelector('.crud-icons');
    crudIcons.innerHTML = ''; // Clear previous buttons
    crudIcons.appendChild(editButton);
    crudIcons.appendChild(deleteButton);

    saveMessages(); // Update the stored messages
}



        function deleteMessage(messageId) {
            const messageDiv = document.getElementById('message-' + messageId);
            messageDiv.remove();

            // Remove message from messages array
            messages = messages.filter(message => message.id !== messageId);
            saveMessages(); // Update the stored messages
        }

        function saveMessages() {
            localStorage.setItem('messages', JSON.stringify(messages));
        }

        document.getElementById('message-input').addEventListener('input', function() {
            clearTimeout(typingTimer);
            document.getElementById('typing-indicator').innerText = 'Typing...';
            typingTimer = setTimeout(function() {
                document.getElementById('typing-indicator').innerText = '';
            }, typingTimeout);
        });
    </script>

</body>
</html>
